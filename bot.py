import os
import logging
import random
import psycopg2
from psycopg2 import sql
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
import google.generativeai as genai

# Load environment variables
load_dotenv()

# Retrieve environment variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL2")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure Gemini AI client
genai.configure(api_key=GEMINI_API_KEY)

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Tarot card data
tarot_cards = [
    # {"name": "–°–º–µ—Ä—Ç—å", "meaning": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.", "image_path": "images/death.jpg"},
    # {"name": "–î—å—è–≤–æ–ª", "meaning": "–ò—Å–∫—É—à–µ–Ω–∏–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º.", "image_path": "images/devil.jpg"},
    # {"name": "10 –º–µ—á–µ–π", "meaning": "–ü—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.", "image_path": "images/ten-swords.jpg"},
    # {"name": "–¢—Ä–∏ —á–∞—à–∏", "meaning": "–ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –∏ –¥—Ä—É–∂–±–∞.", "image_path": "images/three-cups.jpg"},
    # {"name": "–ë–∞—à–Ω—è", "meaning": "–ü–æ—Ç—Ä—è—Å–µ–Ω–∏–µ –∏ –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã.", "image_path": "images/tower.jpg"},
    {"name": "–¢—É–∑ –ø–µ–Ω—Ç–∞–∫–ª–µ–π", "meaning": "–ù–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.", "image_path": "images/ace-pentacles.jpg"},
    {"name": "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "meaning": "–¢—Ä–∞–¥–∏—Ü–∏–∏, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ.", "image_path": "images/hierophant.jpg"},
    {"name": "–õ—é–±–æ–≤—å", "meaning": "–ì–∞—Ä–º–æ–Ω–∏—è, —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–æ—é–∑.", "image_path": "images/love.jpg"},
    {"name": "–ú–∏—Ä", "meaning": "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å.", "image_path": "images/peace.jpg"},
    {"name": "–ó–≤–µ–∑–¥–∞", "meaning": "–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏–π.", "image_path": "images/star.jpg"},
]

def add_user_to_db(user_id, username, first_name, last_name):
    """Adds or updates a user in the database."""
    try:
        with psycopg2.connect(DATABASE_URL) as connection:
            with connection.cursor() as cursor:
                insert_query = """
                    INSERT INTO users (user_id, username, first_name, last_name, start_date, last_visited)
                    VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                    ON CONFLICT (user_id)
                    DO UPDATE SET username = EXCLUDED.username, first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name, last_visited = CURRENT_TIMESTAMP;
                """
                cursor.execute(insert_query, (user_id, username, first_name, last_name))
                logger.info(f"User {username} added/updated in the database.")
    except Exception as e:
        logger.error(f"Database error: {e}")

async def tarot(update: Update, context: CallbackContext) -> None:
    """Handles the /tarot command."""
    random.shuffle(tarot_cards)
    card = random.choice(tarot_cards)
    caption = f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: *{card['name']}*\n\n{card['meaning']}\n\n‚è≥ –°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ..."
    
    try:
        with open(card['image_path'], 'rb') as image_file:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_file, caption=caption, parse_mode=ParseMode.MARKDOWN)
    except FileNotFoundError:
        await update.message.reply_text(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã {card['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    await send_ai_insight(update, card)

async def personal_tarot(update: Update, context: CallbackContext) -> None:
    """Handles the /personal_tarot command."""
    keyboard = [[InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data='male'), InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data='female')]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(keyboard))

async def gender_choice(update: Update, context: CallbackContext) -> None:
    """Handles gender selection for personalized Tarot reading."""
    query = update.callback_query
    await query.answer()
    context.user_data['gender'] = '–ú—É–∂—á–∏–Ω–∞' if query.data == 'male' else '–ñ–µ–Ω—â–∏–Ω–∞'
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

async def name_input(update: Update, context: CallbackContext) -> None:
    """Handles name input for personalized Tarot reading."""
    name = update.message.text
    gender = context.user_data.get('gender', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª–∞')
    card = random.choice(tarot_cards)
    caption = f"{name}, –≤–∞—à–∞ –∫–∞—Ä—Ç–∞: *{card['name']}*\n\n{card['meaning']}"
    
    try:
        with open(card['image_path'], 'rb') as image_file:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_file, caption=caption, parse_mode=ParseMode.MARKDOWN)
    except FileNotFoundError:
        await update.message.reply_text(f"{name}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã {card['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    await send_ai_insight(update, card, name, gender)

async def send_ai_insight(update: Update, card, name=None, gender=None):
    """Generates and sends an AI-based Tarot interpretation."""
    prompt = f"""–ù–∞–ø–∏—à–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ *{card['name']}* {'–¥–ª—è ' + gender + ' –ø–æ –∏–º–µ–Ω–∏ ' + name if name else ''}–≤ —Å–ª–µ–¥—É—é—â–µ–º —Å—Ç–∏–ª–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–ª–æ–¥–∞ *Heaven and Earth*):
    üîÆ *{card['name']}* ‚Äì [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, –µ—ë –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]

    ‚ú® *–°–∏–º–≤–æ–ª–∏–∫–∞ –∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*
    [–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, –µ—ë —Å–∏–º–≤–æ–ª–∏–∫–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ]

    *–ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –∂–∏–∑–Ω–∏:*
    ‚ù§Ô∏è  *–õ—é–±–æ–≤—å:* 
    [–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –ª—é–±–æ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö]

    üíº *–†–∞–±–æ—Ç–∞:* 
    [–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –∫–∞—Ä—å–µ—Ä—ã]

    üí∞ *–§–∏–Ω–∞–Ω—Å—ã:* 
    [–ö–∞–∫ –∫–∞—Ä—Ç–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –∂–∏–∑–Ω–∏]

    üìù *–°–æ–≤–µ—Ç –∫–∞—Ä—Ç—ã:*
    [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç—ã]

    ‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:*
    [–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è]

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì 4096 —Å–∏–º–≤–æ–ª–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π, –æ–±—Ä–∞–∑–Ω—ã–π —è–∑—ã–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ —Å–º—ã—Å–ª –∫–∞—Ä—Ç—ã.
    –í–∫–ª—é—á–∞–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è.
    """
    try:
        model = genai.GenerativeModel('gemini-2.0-flash-001')  
        response = model.generate_content(prompt)
        await update.message.reply_text(response.text.lstrip("#").strip(), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"AI generation error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.")

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    keyboard = [["/tarot", "/personal_tarot"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –±–æ—Ç –¢–∞—Ä–æ. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:',
        reply_markup=reply_markup
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    last_name = update.message.from_user.last_name
    add_user_to_db(user_id, username, first_name, last_name)

def main():
    """Main function to run the bot."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tarot", tarot))
    application.add_handler(CommandHandler("personal_tarot", personal_tarot))
    application.add_handler(CallbackQueryHandler(gender_choice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, name_input))
    
    application.run_polling()

if __name__ == '__main__':
    main()
